{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","cardArray","map","user","i","components_Card","key","SearchBox","searchChange","style","width","aria-label","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isError","info","setState","Component","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","src_components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c3869ed8.chunk.js","sourcesContent":["import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt='robot-photos' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardArray = robots.map((user, i) => {\r\n        return (\r\n            <Card\r\n                key={i}\r\n                id={robots[i].id}\r\n                email={robots[i].email}\r\n                name={robots[i].name}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2 searchbox\">\r\n            <input style={{ width: '50%' }}\r\n                aria-label=\"Search Robots\"\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"Search Robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            'isError': false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ isError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isError)\r\n            return <h1>Oops! An Error Occured!</h1>\r\n        else return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ?\n      <h1 className=\"tc\">Loading ...</h1> :\n      (\n      <div className=\"tc\">\n        <h1 className=\"f1\">Robo Friends</h1>\n        <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    'type': CHANGE_SEARCH_FIELD,\r\n    'payload': text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}